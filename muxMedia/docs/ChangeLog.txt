									ChangeLog of MuxMedia
																		Nov, 2017						Jack Lee

08.02, 2019
================================================
Update log:
	* Debug the problem when UDP multicast is invalidate, av_format_open() will blocked in checkMedia file before player;
	    * Other procotols work fine even their URLs are invalidate;
		* Check "UDP://" in string of URL;
	SDk has same problem because it use ffmpeg also;

Timeout:
HTTP
   FLV
   apiClient -c play -o media=http://192.168.168.74:8083/video1.flv
   4 minutes
   
   HLS URL:
   http://192.168.168.74:8083/video1.m3u8
  
   apiClient -c play -o media=http://192.168.168.74:8083/video1.m3u8

    Normal
	http://192.168.168.74:8083/video1.ts
	apiClient -c play -o media=http://192.168.168.74:8083/video1.ts

	wrong URI: 2 seconds

rtsp
   IP:port: 6 seconds
   apiClient -c play -o media=rtsp://192.168.168.74:38001/video1.rtsp   
   
   Correct IP/port, wrong URI:
   apiClient -c play -o media=rtsp://192.168.168.74:38001/video12.rtsp


UDP

udp://@239.100.0.17:37000
apiClient -c play -o media=udp://@239.100.0.17:37000

07.30, 2019
================================================
Version Update logs:
*. Fixed the problem: Sometimes program may block working with some old TVs, such as L.G., when program starts;
*. Fixed the problem about incorrect networked streams: 
   *. Program can't play again after receiving ``play`` command with incorrect networked stream;
   *. No response for IP Commands from player after playing the streams which is not exists;
*. Test the performance of SDK when playing some nonexisted media
   *. For nonexisted HTTP stream, 4 minutes delay in SDK:
      * Within 4 minutes, the player of this window will reply 'please try later';
*. Change the timeout value (from 25 seconds to 10 seconds) for network streams;
*. Optimizing the internal implementation:
   *. Rename and re-order starting sequencce of the threads, total about 55 threads;
   *. Re-implement the dynamically created threads and timers when playing new media;
   *. Program responses more quickly and more stablely;
*. Change log and debug options:
   *. Add time information in every log item;
   *. Add debug options which can be configured in 
*. Fixed the bug of showing message when media file/stream is not correct;
   *. Before this version, message only be shown about 10 seconds, and then cleared;
   *. Show the message until client clear it;

*. Add timeout configuration of apiClient, and test the timeout of player and client:
   * default timeout is 25 seconds for apiClient;
   

   *. For nonexisted RTSP stream:
      *. When IP or port is wrong, the player of this window will response within 10 seconds;
	  *. When URI is incorrect, but IP/port is correct, the player of this window will never response again;

Client:
-----------------------------------------------
* version info, debugging;
* configure and display timeout value, default 25 seconds;



07.26, 2019
================================================
Synchrous and Asynchrous APIs
------------------------------------------------
First, these APIs is not just function call of a library, it is also call to a thread under the library;

All discussions folliwing are based on this assumption.

Synchrous API
++++++++++++++++++++++++++++++++++++++++++++++++
* Client send event to the server(underlying thread) by a function call, as setMedia();
* Client wait on a condition variable or semaphore;

* Server receive event, and begin to finish the work;
* Server signal a condition variable or post a semaphore;

* Client is waked and the semaphore/condition variable can be signaled/posted by server again;


Asynchrous API
++++++++++++++++++++++++++++++++++++++++++++++++
* Client send event to server, then the function returns;

* Server handle the event and finish its job;
* Server call some callback that client has registered before;

* Callback provided by Client, and called in the context of server;
* Client is notified by the callback;


Debug of SetMedia and stop
------------------------------------------------
SetMedia(play) is synchrous API; Stop(play) is asynchronous API;

Problem
++++++++++++++++++++++++++++++++++++++++++++++++
* The thread, which is calling setMedia(), is interruptted and killed by timer;
* call setMedia() or stop() will be blocked forever:
    * although stop() is asyn API
	    * that means the underlying ``play`` thread is never waked and run although the API is called;
		* because ``play`` is still waiting the semaphore/condition variable is released;
		
    * SetMedia() should be checked again to assure it is blocked forever;
	
	
New Design
++++++++++++++++++++++++++++++++++++++++++++++++
* thread ``SetMedia``:
    * never be interrupted or killed by timer;
	* Set the state of SetMedia, if SetMedia is busy, no other command can be used for this player;
	* All the commands can't be used when SetMedia is busy;
* timer and its timeout call:
    * If timeout, reply error to api client;
	* Never kill thread ``SetMedia`` again;


07.24, 2019
====================================
* Rename all threads:
-----------------------------------
Common threads
    #. main: main thread;
	#. timer: thread used to implement timers;
	#. commu: communication thread, receiving IP commands, send to scheduler, ftp or others;
    #. schedule: schedule IP commands to different threads or device, and reply IP commands;
    #. ftp: ftp client, downloading media files from FTP server;

Media devices control:	
	#. sound: control sound device;
	#. display: control display device, for example, HDMI cable callback is called by this thread;

Threads for every window player: 6 windows used:
  	#. wpVideo: 3 threads for video operation;
	#. wpAudio: audio operations;
    #. wpDecoder: decoder of media sources, such as network protocol and media container files;
	#. wpMedia-X: set media, when new media is defined by schedule, this thread is created and destoried after a while;

Threads for record:
    #. capAudioEnc: audio encoding thread; no corresponding thread for video;
	#. capVideo: video saving thread;
	#. capAudio: audio saving thread;
	#. recorder: receiving recording command and start/stop recording;

Another odd ``display`` thread is created at the end of start up process of the program;
	
	
Program jammed and zombie process
-----------------------------------

* Program sometimes jamed when HDMI cable plugged:
    * thread wmDecoder-5 always is the thread keeped after killed the zombie process;
	    * status of emDecoder-5 is 'D': 
		* status also is 'D' when program is jammed;
	* prcess keep as zombie status (Z) after process is killed;

test and debug jammed
++++++++++++++++++++++++++++++++++++++++++++++++

::

    PROCESS STATE CODES
       D   uninterruptible sleep (usually IO)
       R   runnable (on run queue)
       S   sleeping
       T   traced or stopped
       Z   a defunct ("zombie") process 

       For BSD formats and when the "stat" keyword is used, additional letters may be displayed:
       W   has no resident pages
       <   high-priority process
       N   low-priority task
       L   has pages locked into memory (for real-time and custom IO)

Uninterruptible sleep (usually IO): In this state, a process doesn't wake up right away to process signals. 
When doing device I/O it's the only way to go (otherwise data corruption could result).

``Analysis``: 
* ``Uninterruptible sleep`` means waiting data when access data for thread of ``wmDecoder-5``;
* ``wmDecoder-5`` thread will output video to HDMI;
* ``display`` thread is executing plugin operation when program starts;
* when ``display`` is control HDMI device, ``wmDecoder-5`` can't use it, so it is blocked on I/O;


``Option-1``:
* Delay plugin callback more, and after all players have been created, call it;
* Release init mutex later to start callback later;

* It become more worse;


``Option-2``:
* call plugin callback as early as possible;
* ``display`` thread created earlier before any window players;
* Normally all window players are created after callback has been called;
* It become more worse;


	
test and debug zombie process
++++++++++++++++++++++++++++++++++++++++++++++++

add following code:

::

	#include <sys/wait.h>

	static void _sigChldHandler(int sig)
	{
		int saved_errno = errno;
		pid_t pid;
		
		do
		{
			MUX_ERROR("Signal CHLD is called");
			pid = waitpid((pid_t)(-1), 0, WNOHANG);
			if(pid> 0)
			{
				MUX_INFO("thread %d exit now", pid);
			}
			
		}while(pid> 0);
		
		errno = saved_errno;
	}

	int sysSignalRegisterChild(void)
	{
		struct sigaction sa;
		
		sa.sa_handler = &_sigChldHandler;
		sigemptyset(&sa.sa_mask);
		sa.sa_flags = SA_RESTART | SA_NOCLDSTOP;
		
		if (sigaction(SIGCHLD, &sa, 0) == -1)
		{
			perror(0);
			exit(1);
			return -1;
		}

		return 0;
	}


* But no signal of CHLD is receivied even if wdMediaX-Y exit normally;
* No thread exit when program jammed when it starts;
* So zombie process is not come from CHLD signals;
* Zombie process is come from state D of wmDecoder-5 which is the last thread of decoder;

	
3 test cases after fixing
++++++++++++++++++++++++++++++++++++++++++++++++
#. Start up normally with HDMI cable pluginned;
#. Start up without HDMI cable pluginned;
#. Plugin and plugoff after program runs normally;	
	

07.05, 2019
---------------------------
Enable CEC when plugin HDMI cable to support commands of cecStandby, cecImageOn, cecVolumeUp, cecVolumeDown and cecMute;


07.02, 2019
---------------------------
Program crash:
   * play non-existed media file;
   * play existed media file;
   * alert message;
   
   * it is very slow to play media file, after play nonexisted file;
   * It is quick to report error when playing non-existed file;


06.25, 2019
---------------------------
* text shown without border in text box;
* Auto video format: select native_format in EDID parameters;
* Tune configuration of format, depth and color space: 
	* only startup once when plugged in; 
	* startup when every command is executed;
	* Disable CEC disable operation in the callback of unplugin;
	* Test delay of every configuration operations;
* Test fault when HDMI plugged in:
    * works fine when plug off and plug in after program starts up: so callback of plugin operation is good;
	* works fine when program starts up if HDMI is plugged off;
	* Sometimes jamed when program starts up if HDMI is connected;
		* Change the activities sequence of startup to fix it;
		    * add mutex to the start process;
			* start process catch the mutex, and release mutex after all players have been created;
			* only all players are created, HDMI plugin callback can be used;

		

Before 06.17
---------------------------
* logo is always on the top of other higo objects;
* save and dynamically configure video format(h, w, framerate), color depth, color space;
* alignment of text: horizontal and vertical;
* add new commands and parameters in commands to support these new features;

Aug,17, 2018
	Modified Secure chip validating code: cmnMuxDs.c;

Feb.26th, 2018

	Modification of 2 configuration items in /etc/mLab/muxPlayer.conf
			VideoFormat				Auto|4090X2160_60|3840X2160P_30
						'Auto': selecting the optmized resolution based on EDID; otherwise using format defined here, such as '4090X2160_60';
			DeepColor					100|0|1|2
						'0': 8bits(24bits)
						'1': 10bits(30bits)
						'2': 12bits(36bits)

	Adding 2 APIs for configuring resolution and deep color on-fly:
		API of resolution:
			command line : 'apiClient -c resolution -o resolution=4090X2160_60'
			JSON messages:
				request
				{
					"comment":	"Play one local media file or playlist",
					"targ":	"11:11:11:11:11:11",
					"cmd":	"play_media",
					"login_ack":	"root",
					"pwd_msg":	"123",
					"data":	[{
							"comment":	"Change resolution of TV on-fly",
							"action":	"resolution",
							"objects":	[{
										"resolution":	"4090X2160_60"
							}]
					}]
			}'
			
			reply:
			'{
					"comment":	"Play one local media file or playlist",
					"targ":	"11:11:11:11:11:11",
					"cmd":	"play_media",
					"login_ack":	"OK",
					"pwd_msg":	"OK",
					"data":	[{
							"comment":	"Change resolution of TV on-fly",
							"action":	"resolution",
							"objects":	[{
											"resolution":	"4090X2160_60"
							}],
							"status":	200
					}]
			}'

		API of deep color:
			command line : 'apiClient -c color -o color=2'
			JSON messages:
			request
			'{
					"comment":	"Play one local media file or playlist",
					"targ":	"11:11:11:11:11:11",
					"cmd":	"play_media",
					"login_ack":	"root",
					"pwd_msg":	"123",
					"data":	[{
							"comment":	"Change color depth of TV on-fly, color 0(8bits),1(10bits), 2(12bits)",
							"action":	"color",
							"objects":	[{
											"color":	2
							}]
					}]
		}'
		reply:
		'{
					"comment":	"Play one local media file or playlist",
					"targ":	"11:11:11:11:11:11",
					"cmd":	"play_media",
					"login_ack":	"OK",
					"pwd_msg":	"OK",
					"data":	[{
								"comment":	"Change color depth of TV on-fly, color 0(8bits),1(10bits), 2(12bits)",
								"action":	"color",
								"objects":	[{
												"color":	2
								}],
								"status":	200
					}]
		}'

			Notes:
				After player startup, resolution and deep color can be changed with these 2 commands no matter when configuration it is;
				The resolution can be used in command of 'resolution' shows as following:
							{/* 0*/
								.type = HI_UNF_ENC_FMT_1080P_60,
								.name = "1080P_60",
							},
							{
								.type = HI_UNF_ENC_FMT_1080P_50,
								.name = "1080P_50", /**<1080p 50 Hz*/
							},
							{
								.type = HI_UNF_ENC_FMT_1080P_30,
								.name = "1080P_30",/**<1080p 30 Hz*/
							},
							{
								.type = HI_UNF_ENC_FMT_1080P_25,
								.name = "1080P_25",
							},
							{
								.type = HI_UNF_ENC_FMT_1080P_24,
								.name = "1080P_24",
							},
							{/* 5*/
								.type = HI_UNF_ENC_FMT_1080i_60,
								.name = "1080i_60",
							},
							{
								.type = HI_UNF_ENC_FMT_1080i_50,
								.name = "1080i_50",
							},
							{
								.type = HI_UNF_ENC_FMT_720P_60,
								.name = "720P_60",
							},
							{
								.type = HI_UNF_ENC_FMT_720P_50,
								.name = "720P_50",
							},
							{
								.type = HI_UNF_ENC_FMT_576P_50,
								.name = "576P_50",
							},
							{/* 10 */
								.type = HI_UNF_ENC_FMT_480P_60,
								.name = "480P_60",
							},
							{
								.type = HI_UNF_ENC_FMT_PAL,
								.name = "PAL",
							},
							{
								.type = HI_UNF_ENC_FMT_PAL_N,
								.name = "PAL_N",
							},
							{
								.type = HI_UNF_ENC_FMT_PAL_Nc,
								.name = "PAL_Nc",
							},
							{
								.type = HI_UNF_ENC_FMT_NTSC,
								.name = "NTSC",
							},
							{/* 15 */
								.type = HI_UNF_ENC_FMT_NTSC_J,
								.name = "NTSC_J",
							},
							{
								.type = HI_UNF_ENC_FMT_NTSC_PAL_M,
								.name = "NTSC_PAL_M",
							},
							{
								.type = HI_UNF_ENC_FMT_SECAM_SIN,
								.name = "SECAM_SIN",
							},
							{
								.type = HI_UNF_ENC_FMT_SECAM_COS,
								.name = "SECAM_COS",
							},
							{
								.type = HI_UNF_ENC_FMT_1080P_24_FRAME_PACKING,
								.name = "1080P_24_FP",
							},
							{/* 20 */
								.type = HI_UNF_ENC_FMT_720P_60_FRAME_PACKING,
								.name = "720P_60_FP",
							},
							{
								.type = HI_UNF_ENC_FMT_720P_50_FRAME_PACKING,
								.name = "720P_50_FP",
							},
							{
								.type = HI_UNF_ENC_FMT_861D_640X480_60,
								.name = "861D_640X480_60",
							},
							{
								.type = HI_UNF_ENC_FMT_VESA_800X600_60,
								.name = "VESA_800X600_60",
							},
							{
								.type = HI_UNF_ENC_FMT_VESA_1024X768_60,
								.name = "VESA_1024X768_60",
							},
							{/* 25 */
								.type = HI_UNF_ENC_FMT_VESA_1280X720_60,
								.name = "VESA_1280X720_60",
							},
							{
								.type = HI_UNF_ENC_FMT_VESA_1280X800_60,
								.name = "VESA_1280X800_60",
							},
							{
								.type = HI_UNF_ENC_FMT_VESA_1280X1024_60,
								.name = "VESA_1280X1024_60",
							},
							{
								.type = HI_UNF_ENC_FMT_VESA_1360X768_60,
								.name = "VESA_1360X768_60",
							},
							{
								.type = HI_UNF_ENC_FMT_VESA_1366X768_60,
								.name = "VESA_1366X768_60",
							},
							{/* 30 */
								.type = HI_UNF_ENC_FMT_VESA_1400X1050_60,
								.name = "VESA_1400X1050_60",
							},
							{
								.type = HI_UNF_ENC_FMT_VESA_1440X900_60,
								.name = "VESA_1440X900_60",
							},
							{
								.type = HI_UNF_ENC_FMT_VESA_1440X900_60_RB,
								.name = "VESA_1440X900_60_RB",
							},
							{
								.type = HI_UNF_ENC_FMT_VESA_1600X900_60_RB,
								.name = "VESA_1600X900_60_RB",
							},
							{
								.type = HI_UNF_ENC_FMT_VESA_1600X1200_60,
								.name = "VESA_1600X1200_60",
							},
							{/* 35 */
								.type = HI_UNF_ENC_FMT_VESA_1680X1050_60,
								.name = "VESA_1680X1050_60",
							},
							{
								.type = HI_UNF_ENC_FMT_VESA_1680X1050_60_RB,
								.name = "VESA_1680X1050_60_RB",
							},
							{
								.type = HI_UNF_ENC_FMT_VESA_1920X1080_60,
								.name = "VESA_1920X1080_60",
							},
							{
								.type = HI_UNF_ENC_FMT_VESA_1920X1200_60,
								.name = "VESA_1920X1200_60",
							},
							{
								.type = HI_UNF_ENC_FMT_VESA_1920X1440_60,
								.name = "VESA_1920X1440_60",
							},
							{/* 40 */
								.type = HI_UNF_ENC_FMT_VESA_2048X1152_60,
								.name = "VESA_2048X1152_60",
							},
							{/* 41 */
								.type = HI_UNF_ENC_FMT_VESA_2560X1440_60_RB,
								.name = "VESA_2560X1440_60_RB",
							},
							{ /* 42 */
								.type = HI_UNF_ENC_FMT_VESA_2560X1600_60_RB,
								.name = "VESA_2560X1600_60_RB",
							},
							{ /*  0x40, 64 */
								.type = HI_UNF_ENC_FMT_3840X2160_24,
								.name = "3840X2160P_24",
							},
							{/* 65 */
								.type = HI_UNF_ENC_FMT_3840X2160_25,
								.name = "3840X2160P_25",
							},
							{
								.type = HI_UNF_ENC_FMT_3840X2160_30,
								.name = "3840X2160P_30",
							},
							{
								.type = HI_UNF_ENC_FMT_3840X2160_50,
								.name = "3840X2160P_50",
							},
							{
								.type = HI_UNF_ENC_FMT_3840X2160_60,
								.name = "3840X2160P_60",
							},
							{
								.type = HI_UNF_ENC_FMT_4096X2160_24,
								.name = "4090X2160_24",
							},
							{/* 70 */
								.type = HI_UNF_ENC_FMT_4096X2160_25,
								.name = "4090X2160_25",
							},
							{
								.type = HI_UNF_ENC_FMT_4096X2160_30,
								.name = "4090X2160_30",
							},
							{
								.type = HI_UNF_ENC_FMT_4096X2160_50,
								.name = "4090X2160_50",
							},
							{
								.type = HI_UNF_ENC_FMT_4096X2160_60,
								.name = "4090X2160_60",
							},
							{
								.type = HI_UNF_ENC_FMT_3840X2160_23_976,
								.name = "3840X2160_23_976",
							},
							{/* 75 */
								.type = HI_UNF_ENC_FMT_3840X2160_29_97,
								.name = "3840X2160_29_97",
							},
							{
								.type = HI_UNF_ENC_FMT_720P_59_94,
								.name = "720P_59_94",
							},
							{
								.type = HI_UNF_ENC_FMT_1080P_59_94,
								.name = "1080P_59_94",
							},
							{
								.type = HI_UNF_ENC_FMT_1080P_29_97,
								.name = "1080P_29_97",
							},
							{
								.type = HI_UNF_ENC_FMT_1080P_23_976,
								.name = "1080P_23_976",
							},
						
							{/* 80 */
								.type = HI_UNF_ENC_FMT_1080i_59_94,
								.name = "1080i_59_94",
							},

		

		Remount /media/sd with write permission when player writes file to SD card;
		Remount /media/sd with read-only permission when player finish the writing operation on SD card;
		


		EDID command deep color can work for 8/10/12 bits on model of '1080P_60';
		mount -o remount -o ro /media/sd
		mount -o remount -o rw /media/sd


Feb.15th, 2018
		Support configuration of deep color and resolution on-fly:
			About resolution:
					Read and parse EDID from TV/TX, and then configure the resolution of TV/TX on-fly;
					
			About Deep Color:
					Add new configuration item of 'DeepColor' in /etc/mLab/muxPlayer.conf
						# Deep Color: 0: 24(8)bits; 1: 30(10)bits; 2: 36(12)bits; others: Auto Configuration
						DeepColor						100
		  		Normally it is configured as '100' to make on-fly configuration;
		  		If it is configured as '0', '1' and '2', then Deep Color configured as '8', '10', '12';
		  		


Jan.23rd, 2018
		Add more validations for Playlist updateing operations, make every update is more reliable;				
		Add more strong logic of check window handler when window is moving;
		More mutex protections between controller thread, player thread and SDK threads;
		Testing these with layout from webpage;

Jan.7th, 2018
		Add MAC authentication validation;

Jan,5th, 2018
		Add new command for CEC control commmands: cecStandby, cecImageOn, cecVolumeUp, cecVolumeDown, cecMute, cecInfo;
				cecStandby, cecImage: passed in SAMSUNGCN40JU6500;
				cecVolumeUp, cecVolumeDown, cecMute: not tested in suitable TV;
				cecInfo: 
						Retrieve and return the formats list, which TV supports, through CEC control channel, such as '1080P_60', '4090X2160_60'; For example, return list from SAMSUNGUN40JU6500 TV:
							[{
									"Manufacture":	"SAM",
									"NativeFormat":	"3840X2160P_60",
									"Formats":	[
										"1080P_60", "1080P_50", "1080P_30", "1080P_25", "1080P_24", "1080i_60", "1080i_50", "720P_60", "720P_50", "576P_50", "480P_60", "PAL", "NTSC", 
										"VESA_800X600_60", "VESA_1024X768_60", "VESA_1280X800_60", "VESA_1280X1024_60", "VESA_1440X900_60", "VESA_1600X900_60_RB", "VESA_1680X1050_60", 
										"3840X2160P_24", "3840X2160P_25", "3840X2160P_30", "3840X2160P_50", "3840X2160P_60", "4090X2160_24", 
										"4090X2160_25", "4090X2160_30", "4090X2160_50", "4090X2160_60"]
							}],

						This format can be used in /etc/mLab/muxPlayer.conf to configure the resolution of TV;
					Note: 
						Some format returned from TV can not used now;
						Different TV has different format list;
		Add new configuration item of 'VideoFormat' in /etc/mLab/muxPlayer.conf	to configure the resolution of TV;
		Release packaging of all: packaging as zip format;
		

		Add secure code checking;
		
		
About release packages and update of 769 firmware:
		Total 2 packages:
				resources.font.zip: 
						contains 2 font files in /etc/sys/fonts;
						Only install once when new system is installing;
				muxMedia_4.9.2_arm_$RELEASE_$DATE.zip		
						$RELEASE: can be 'release' or 'debug', means release version or debug version;
						$DATE: building date, such as '2018_01_04';
						Version info and build datetime can be checked with API: 'apiClient -c verInfo', for example:
							[{
								"name":	"mediaMain",
								"version":	"01.0.01-01, Jan  3 2018 16:46:51"
							}, {
								"name":	"mediaPlayer",
								"version":	"01.0.01-01, Jan  4 2018 15:45:49"
							}, {
								"name":	"mediaRecorder",
								"version":	"01.0.01-01, Jan  3 2018 16:46:56"
						}],
						
						
						It contains 4 directories, such as '/etc', '/lib', '/sbin' and 'usr/bin';
						This package can be used as firmware updating package when new version will be released;
						
						
						
		About installation:
				uncompress these 2 package into '/', eg. root directory of filesystem;
				add one command line in startup script to start it, such as 'muxMedia' or '/sbin/muxMedia';
				

		Add version and building date/time information when every module start:
				6 modules: main, player, recorder, web, server, apiClient;

Dec.29th,2017
	Debug: 'osdBackground' command or some OSD commands will fail after reposition this OSD;
	Debug: command of 'osdTranpanrency' soes not work in apiClient: bug comes from changing osdBackground in format of '0xTTRRGGBB';
	Bugs: Timers work abnormal after progra, daemonized;
			
Dec.28th, 2017
		Release version:
				Don't save any playlist in Player;
				Play next one and show error message when playing fails;
					Add configuring item of 'TimeoutErrorMsg' in muxPlayer.conf to define the delay for msg when playing fails;
					default timeout is 10 seconds;
				Release version:
					Run as daemon, defaultly;
					Save log into log file in '/tmp/muxMedia.log';
					Set debug level as 3(ERR);
					Optimizing the log output;
				Remove all debugging log message;
				Only load the essential modules, others are not built and upload to board;
				Other bugs for crash: 
					Mixed OSD of PIP4 with OSD of SUBTITLE;
					Protection of OSD operations between PLAYER, SetMediaX-XX, SetMedia0-1(subtitle) and timer thread;
				

Dec.27th, 2017
		debug the problem of subtitle callback on OSD object with PIP4, not SUBTITLE OSD;
		Modify the mutual lock for HIGO access between PLAYER, SetMedia and Timer for Alert:
			JSON command for OSD/window control and subtitle callback:
					muxRxPlayCmdWindow.c: only locateWindow
					muxRxPlaySubtitleCb.c: Clear () + Draw(only text subtitle: muxOsdOutputText() )
					muxPlayerJsonMedia.c
					muxRxOsdOutput.c: only for timer;ps
					
		Disable warns of 'pRefer is null' and 'cache time is 0' in HiPlayer open media;

Dec.22nd, 2017
		Add error message display when error happens in playing, and continue to the next one;
		Found mutual access of higo object from PLAYER thread and setMedia thread of HiPlayer;

Dec.20, 2017
		Add function of configuration/control for aspect of video playing window: only used in when playing video:
				Configuration: modification of muxPlayer.conf
						Configuring item of 'DisplayMode' for every window:
								# 0: stretch to fill, default; 
								# 1: show all video, adding black border; 
								# 2: show central part, keeping ratio of video;
								# 3: show central part, squeezing about 10%, eg not keeping ratio of video;
						
				Control:
							API command of 'aspect' for dynamic control
Request:
'{
	"comment":	"Play one local media file or playlist",
	"targ":	"11:11:11:11:11:11",
	"cmd":	"play_media",
	"login_ack":	"root",
	"pwd_msg":	"123",
	"data":	[{
			"comment":	"set display mode/aspect of one window",
			"action":	"aspect",
			"objects":	[{
					"window":	1,
					"mode":	0
				}]
		}]
}'
reply:
'{
	"comment":	"Play one local media file or playlist",
	"targ":	"11:11:11:11:11:11",
	"cmd":	"play_media",
	"login_ack":	"OK",
	"pwd_msg":	"OK",
	"data":	[{
			"comment":	"set display mode/aspect of one window",
			"action":	"aspect",
			"objects":	[{
					"window":	1,
					"mode":	0
				}],
			"status":	200
		}]
}'


Dec.19, 2017, Update 2
		Set location of playing window and OSD window based on current state: PLAY_IMAGE or PLAY;
		KeepLastFrame for video playing, default is 'NO' to hidden last frame of last video when switch;
		Add script for integrated test: testing location and playing image/video;

Dec.19, 2017
		Change OSD background command, set background color in format of '0xFFRRGGBB';
		Tested EoF replay, Play->Stop->Play commands;
		Debugging ther response when wrong URL is input;
		Debugging timeout handler for playing image;
		Debugging switch between playing image and playing video;
		Test re-location window when playing stopped;
		Put build options together to accelerate the build for program;
		Add test scripts in tests/scripts/testCaseXXXX.sh;
		Other bugs, such as save configuration file;

Dec.14, 2017
		Debug the problem of segment fault from SetMedia of HiPlayer;
		Modify configuration file to suit the requirements of release;
		Add test codes for SDK: higo, players, muxWin and code:
			higo: 14+1 programs;
			players: ipplayer, localplayer, mosaic players, 5 players;
			muxWin: player with window controlling, one program;
			code: transcode and capture, 2 programs;
		Add testing scripts;
		Clear the build environments: using Rules.mak and Makefile.pre in the top level directory of repository;
		

Dec.8, 2017
		New features:
				Configuration item for the window after playing ends:
						'WindowKeepLastFrame' in /etc/mLab/muxPlayer.conf: keep last frame of playing or make window black;
				IP command 'audio': control audio state (enable/disable) of every window;
				IP command 'osdInfo': retrieve all info about OSD:location, font size, font color, background, etc.;
				
				Modify IP command 'playlistAdd', 'playlist': every media (image file/stream file/Network URL) is defined as 2 fields of 'URL' and 'Duration';
				Modify IP command 'play' to support media(video or/and audio) and image file with assigned timeout value;
				
				Debug the problem of crash when playing about 300 times;
				Debug the problem of capture/record: can't capturing any data after several times of successful capture/record;
				
				IP command 'threads': get info about main threads;
				IP command 'verinfo': get version info about modules;
				
				Add *.mpg file supports;

		Performance:
				6 Windows playing simultaneously:
						Memory about 650MB, about 37.7%;
						CPU : %20.o;


Nov.22, 2017
		Background color and transparency of OSD box in one command of 'osdBackground';
		

Nov.20, 2017
	Funcations about audio control in every window:
			IP commands of 'mute', 'vol+' and 'vol-' are used to control the audio of one window:
					add 'index' parameter for these 3 commands;
			Add IP command of 'muteAll' to mute sound card for all windows;
			
			Recording based on state of main window:
					when no playing in main window, record can not be started;

nov.16, 2017:
	Function of PLAYER:
			Dynamic Playlist:
					New IP command: playlistAdd
					add playlist and play the newly-added playlist without restart program;
					one playlist can be played with different repeat number;
					when repeat number is 0, it will play again after the playing ends;
		
			File playing:
					one local media or URL can be played with different repeat number;
			
			IP command of 'Files'/'File':
					return duration and size of local media files/file;
			
			Scan local files:
					scan image file type: git, jpg, png, bmp, etc.
					scan audio file: aac and MP3;
			
			Play audio file in MAIN window:
					aac and mp3 audio file;
			
			Banner/Alert:
					Set background: background color is in format of '0xFFRRGGBB', where the most significant 8 bits is always 0xFF;
					Set transparency: 0~255, 0: banner is invisible; 255 is fully visible;
					Set font color: every 'alert' command is sent with parameter of color and message, so set font color command may be not used;
					Enable/Disable playing info in banner OSD, which can be configured in muxPlayer.conf;
					
			Audio of one Window:
					Every window has one configuration item of 'AudioEnable', when it is 'YES', the audio of this window will be output;
					For MAIN window, AudioEnable is 'YES' defaultly; for other PIP windows, it is 'NO' defaultly;
		